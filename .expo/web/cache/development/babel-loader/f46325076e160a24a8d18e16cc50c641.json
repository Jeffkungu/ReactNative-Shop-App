{"ast":null,"code":"var _jsxFileName = \"/Users/user/ReactNative Project/ReactNative-Shop-App/node_modules/react-navigation-header-buttons/src/HeaderButton.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nvar BUTTON_HIT_SLOP = {\n  top: 5,\n  bottom: 5,\n  left: 5,\n  right: 5\n};\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Touchable from 'react-native-platform-touchable';\nvar useForeground = Platform.OS === 'android' && TouchableNativeFeedback.canUseNativeForeground();\nexport class HeaderButton extends React.PureComponent {\n  render() {\n    var _this$props = this.props,\n        {\n      onPress,\n      buttonWrapperStyle,\n      testID,\n      getButtonElement,\n      ButtonElement: ButtonElementOverride,\n      background,\n      iconName,\n      title,\n      buttonStyle,\n      IconComponent,\n      iconSize,\n      color\n    } = _this$props,\n        other = _objectWithoutProperties(_this$props, [\"onPress\", \"buttonWrapperStyle\", \"testID\", \"getButtonElement\", \"ButtonElement\", \"background\", \"iconName\", \"title\", \"buttonStyle\", \"IconComponent\", \"iconSize\", \"color\"]);\n\n    var ButtonElement = ButtonElementOverride || getButtonElement({\n      iconName,\n      title,\n      buttonStyle,\n      IconComponent,\n      iconSize,\n      color\n    });\n    return React.createElement(Touchable, _extends({\n      useForeground: useForeground,\n      background: useForeground ? undefined : background,\n      foreground: useForeground ? background : undefined,\n      disabled: !onPress,\n      onPress: onPress,\n      hitSlop: BUTTON_HIT_SLOP,\n      style: [styles.buttonContainer, buttonWrapperStyle],\n      testID: testID\n    }, other, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }), React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, ButtonElement));\n  }\n\n}\nHeaderButton.defaultProps = {\n  background: Touchable.Ripple('rgba(0, 0, 0, .32)', true)\n};\nvar styles = StyleSheet.create({\n  buttonContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/user/ReactNative Project/ReactNative-Shop-App/node_modules/react-navigation-header-buttons/src/HeaderButton.js"],"names":["React","BUTTON_HIT_SLOP","top","bottom","left","right","Touchable","useForeground","Platform","OS","TouchableNativeFeedback","canUseNativeForeground","HeaderButton","PureComponent","render","props","onPress","buttonWrapperStyle","testID","getButtonElement","ButtonElement","ButtonElementOverride","background","iconName","title","buttonStyle","IconComponent","iconSize","color","other","undefined","styles","buttonContainer","defaultProps","Ripple","StyleSheet","create","alignItems","justifyContent"],"mappings":";;;;;;;;AAGA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,IAAMC,eAAe,GAAG;AAAEC,EAAAA,GAAG,EAAE,CAAP;AAAUC,EAAAA,MAAM,EAAE,CAAlB;AAAqBC,EAAAA,IAAI,EAAE,CAA3B;AAA8BC,EAAAA,KAAK,EAAE;AAArC,CAAxB;;;;;AAEA,OAAOC,SAAP,MAAsB,iCAAtB;AAWA,IAAMC,aAAa,GAAGC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BC,uBAAuB,CAACC,sBAAxB,EAAnD;AAyBA,OAAO,MAAMC,YAAN,SAA2BZ,KAAK,CAACa,aAAjC,CAAsD;AAK3DC,EAAAA,MAAM,GAAG;AACP,sBAcI,KAAKC,KAdT;AAAA,QAAM;AACJC,MAAAA,OADI;AAEJC,MAAAA,kBAFI;AAGJC,MAAAA,MAHI;AAIJC,MAAAA,gBAJI;AAKJC,MAAAA,aAAa,EAAEC,qBALX;AAMJC,MAAAA,UANI;AAOJC,MAAAA,QAPI;AAQJC,MAAAA,KARI;AASJC,MAAAA,WATI;AAUJC,MAAAA,aAVI;AAWJC,MAAAA,QAXI;AAYJC,MAAAA;AAZI,KAAN;AAAA,QAaKC,KAbL;;AAgBA,QAAMT,aAAa,GACjBC,qBAAqB,IACrBF,gBAAgB,CAAC;AAAEI,MAAAA,QAAF;AAAYC,MAAAA,KAAZ;AAAmBC,MAAAA,WAAnB;AAAgCC,MAAAA,aAAhC;AAA+CC,MAAAA,QAA/C;AAAyDC,MAAAA;AAAzD,KAAD,CAFlB;AAIA,WACE,oBAAC,SAAD;AACE,MAAA,aAAa,EAAErB,aADjB;AAEE,MAAA,UAAU,EAAEA,aAAa,GAAGuB,SAAH,GAAeR,UAF1C;AAGE,MAAA,UAAU,EAAEf,aAAa,GAAGe,UAAH,GAAgBQ,SAH3C;AAIE,MAAA,QAAQ,EAAE,CAACd,OAJb;AAKE,MAAA,OAAO,EAAEA,OALX;AAME,MAAA,OAAO,EAAEf,eANX;AAOE,MAAA,KAAK,EAAE,CAAC8B,MAAM,CAACC,eAAR,EAAyBf,kBAAzB,CAPT;AAQE,MAAA,MAAM,EAAEC;AARV,OASMW,KATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAWE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOT,aAAP,CAXF,CADF;AAeD;;AAzC0D;AAAhDR,Y,CACJqB,Y,GAAe;AACpBX,EAAAA,UAAU,EAAEhB,SAAS,CAAC4B,MAAV,CAAiB,oBAAjB,EAAuC,IAAvC;AADQ,C;AA2CxB,IAAMH,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,eAAe,EAAE;AACfK,IAAAA,UAAU,EAAE,QADG;AAEfC,IAAAA,cAAc,EAAE;AAFD;AADc,CAAlB,CAAf","sourcesContent":["/**\n * @flow\n */\nimport * as React from 'react';\nconst BUTTON_HIT_SLOP = { top: 5, bottom: 5, left: 5, right: 5 };\nimport { StyleSheet, View, Platform, TouchableNativeFeedback } from 'react-native';\nimport Touchable from 'react-native-platform-touchable';\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\n\n// from <Item />\nexport type HeaderButtonProps = {\n  onPress: ?() => any,\n  buttonWrapperStyle?: ViewStyleProp,\n  ButtonElement?: React.Element<any>,\n  testID?: string,\n};\n\nconst useForeground = Platform.OS === 'android' && TouchableNativeFeedback.canUseNativeForeground();\n\n// props that pertain to styling of visible buttons\n// these are partially passed from <Item /> and partially supplied by you, the developer when you wrap <HeaderButton />\nexport type VisibleButtonProps = $Exact<{\n  iconName?: string,\n  title: string,\n  buttonStyle?: ViewStyleProp,\n\n  IconComponent?: React.ComponentType<any>,\n  iconSize?: number,\n  color?: string,\n}>;\n\ntype OtherProps = {\n  background: any,\n  getButtonElement: VisibleButtonProps => React.Element<any>,\n};\n\ntype Props = {\n  ...$Exact<HeaderButtonProps>,\n  ...$Exact<VisibleButtonProps>,\n  ...$Exact<OtherProps>,\n};\n\nexport class HeaderButton extends React.PureComponent<Props> {\n  static defaultProps = {\n    background: Touchable.Ripple('rgba(0, 0, 0, .32)', true),\n  };\n\n  render() {\n    const {\n      onPress,\n      buttonWrapperStyle,\n      testID,\n      getButtonElement,\n      ButtonElement: ButtonElementOverride,\n      background,\n      iconName,\n      title,\n      buttonStyle,\n      IconComponent,\n      iconSize,\n      color,\n      ...other\n    } = this.props;\n\n    const ButtonElement =\n      ButtonElementOverride ||\n      getButtonElement({ iconName, title, buttonStyle, IconComponent, iconSize, color });\n\n    return (\n      <Touchable\n        useForeground={useForeground}\n        background={useForeground ? undefined : background}\n        foreground={useForeground ? background : undefined}\n        disabled={!onPress}\n        onPress={onPress}\n        hitSlop={BUTTON_HIT_SLOP}\n        style={[styles.buttonContainer, buttonWrapperStyle]}\n        testID={testID}\n        {...other}\n      >\n        <View>{ButtonElement}</View>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}