{"ast":null,"code":"var _jsxFileName = \"/Users/user/ReactNative Project/ReactNative-Shop-App/node_modules/react-native-platform-touchable/PlatformTouchable.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nvar TouchableComponent;\n\nif (Platform.OS === 'android') {\n  TouchableComponent = Platform.Version <= 20 ? TouchableOpacity : TouchableNativeFeedback;\n} else {\n  TouchableComponent = TouchableOpacity;\n}\n\nif (TouchableComponent !== TouchableNativeFeedback) {\n  TouchableComponent.SelectableBackground = () => ({});\n\n  TouchableComponent.SelectableBackgroundBorderless = () => ({});\n\n  TouchableComponent.Ripple = () => ({});\n\n  TouchableComponent.canUseNativeForeground = () => false;\n}\n\nexport default class PlatformTouchable extends React.Component {\n  render() {\n    var _this$props = this.props,\n        {\n      children,\n      style,\n      foreground,\n      background,\n      useForeground\n    } = _this$props,\n        props = _objectWithoutProperties(_this$props, [\"children\", \"style\", \"foreground\", \"background\", \"useForeground\"]);\n\n    children = React.Children.only(children);\n\n    if (TouchableComponent === TouchableNativeFeedback) {\n      useForeground = foreground && TouchableNativeFeedback.canUseNativeForeground();\n\n      if (foreground && background) {\n        console.warn('Specified foreground and background for Touchable, only one can be used at a time. Defaulted to foreground.');\n      }\n\n      return React.createElement(TouchableComponent, _extends({}, props, {\n        useForeground: useForeground,\n        background: useForeground && foreground || background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }, children));\n    } else if (TouchableComponent === TouchableWithoutFeedback) {\n      return React.createElement(TouchableWithoutFeedback, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }, children));\n    } else {\n      var TouchableFallback = this.props.fallback || TouchableComponent;\n      return React.createElement(TouchableFallback, _extends({}, props, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }), children);\n    }\n  }\n\n}\nPlatformTouchable.SelectableBackground = TouchableComponent.SelectableBackground;\nPlatformTouchable.SelectableBackgroundBorderless = TouchableComponent.SelectableBackgroundBorderless;\nPlatformTouchable.Ripple = TouchableComponent.Ripple;\nPlatformTouchable.canUseNativeForeground = TouchableComponent.canUseNativeForeground;","map":{"version":3,"sources":["/Users/user/ReactNative Project/ReactNative-Shop-App/node_modules/react-native-platform-touchable/PlatformTouchable.js"],"names":["React","TouchableComponent","Platform","OS","Version","TouchableOpacity","TouchableNativeFeedback","SelectableBackground","SelectableBackgroundBorderless","Ripple","canUseNativeForeground","PlatformTouchable","Component","render","props","children","style","foreground","background","useForeground","Children","only","console","warn","TouchableWithoutFeedback","TouchableFallback","fallback"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;AASA,IAAIC,kBAAJ;;AAEA,IAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7BF,EAAAA,kBAAkB,GAChBC,QAAQ,CAACE,OAAT,IAAoB,EAApB,GAAyBC,gBAAzB,GAA4CC,uBAD9C;AAED,CAHD,MAGO;AACLL,EAAAA,kBAAkB,GAAGI,gBAArB;AACD;;AAED,IAAIJ,kBAAkB,KAAKK,uBAA3B,EAAoD;AAClDL,EAAAA,kBAAkB,CAACM,oBAAnB,GAA0C,OAAO,EAAP,CAA1C;;AACAN,EAAAA,kBAAkB,CAACO,8BAAnB,GAAoD,OAAO,EAAP,CAApD;;AACAP,EAAAA,kBAAkB,CAACQ,MAAnB,GAA4B,OAAO,EAAP,CAA5B;;AACAR,EAAAA,kBAAkB,CAACS,sBAAnB,GAA4C,MAAM,KAAlD;AACD;;AAED,eAAe,MAAMC,iBAAN,SAAgCX,KAAK,CAACY,SAAtC,CAAgD;AAM7DC,EAAAA,MAAM,GAAG;AACP,sBAOI,KAAKC,KAPT;AAAA,QAAI;AACFC,MAAAA,QADE;AAEFC,MAAAA,KAFE;AAGFC,MAAAA,UAHE;AAIFC,MAAAA,UAJE;AAKFC,MAAAA;AALE,KAAJ;AAAA,QAMKL,KANL;;AAaAC,IAAAA,QAAQ,GAAGf,KAAK,CAACoB,QAAN,CAAeC,IAAf,CAAoBN,QAApB,CAAX;;AAEA,QAAId,kBAAkB,KAAKK,uBAA3B,EAAoD;AAClDa,MAAAA,aAAa,GACXF,UAAU,IAAIX,uBAAuB,CAACI,sBAAxB,EADhB;;AAGA,UAAIO,UAAU,IAAIC,UAAlB,EAA8B;AAC5BI,QAAAA,OAAO,CAACC,IAAR,CACE,6GADF;AAGD;;AAED,aACE,oBAAC,kBAAD,eACMT,KADN;AAEE,QAAA,aAAa,EAAEK,aAFjB;AAGE,QAAA,UAAU,EAAGA,aAAa,IAAIF,UAAlB,IAAiCC,UAH/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAIE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,QADH,CAJF,CADF;AAUD,KApBD,MAoBO,IAAId,kBAAkB,KAAKuB,wBAA3B,EAAqD;AAC1D,aACE,oBAAC,wBAAD,eAA8BV,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEE,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,QADH,CADF,CADF;AAOD,KARM,MAQA;AACL,UAAIU,iBAAiB,GAAG,KAAKX,KAAL,CAAWY,QAAX,IAAuBzB,kBAA/C;AACA,aACE,oBAAC,iBAAD,eAAuBa,KAAvB;AAA8B,QAAA,KAAK,EAAEE,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACGD,QADH,CADF;AAKD;AACF;;AA1D4D;AAA1CJ,iB,CACZJ,oB,GAAuBN,kBAAkB,CAACM,oB;AAD9BI,iB,CAEZH,8B,GAAiCP,kBAAkB,CAACO,8B;AAFxCG,iB,CAGZF,M,GAASR,kBAAkB,CAACQ,M;AAHhBE,iB,CAIZD,sB,GAAyBT,kBAAkB,CAACS,sB","sourcesContent":["import React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  View,\n} from 'react-native';\n\nlet TouchableComponent;\n\nif (Platform.OS === 'android') {\n  TouchableComponent =\n    Platform.Version <= 20 ? TouchableOpacity : TouchableNativeFeedback;\n} else {\n  TouchableComponent = TouchableOpacity;\n}\n\nif (TouchableComponent !== TouchableNativeFeedback) {\n  TouchableComponent.SelectableBackground = () => ({});\n  TouchableComponent.SelectableBackgroundBorderless = () => ({});\n  TouchableComponent.Ripple = () => ({});\n  TouchableComponent.canUseNativeForeground = () => false;\n}\n\nexport default class PlatformTouchable extends React.Component {\n  static SelectableBackground = TouchableComponent.SelectableBackground;\n  static SelectableBackgroundBorderless = TouchableComponent.SelectableBackgroundBorderless;\n  static Ripple = TouchableComponent.Ripple;\n  static canUseNativeForeground = TouchableComponent.canUseNativeForeground;\n\n  render() {\n    let {\n      children,\n      style,\n      foreground,\n      background,\n      useForeground,\n      ...props\n    } = this.props;\n\n    // Even though it works for TouchableWithoutFeedback and\n    // TouchableNativeFeedback with this component, we want\n    // the API to be the same for all components so we require\n    // exactly one direct child for every touchable type.\n    children = React.Children.only(children);\n\n    if (TouchableComponent === TouchableNativeFeedback) {\n      useForeground =\n        foreground && TouchableNativeFeedback.canUseNativeForeground();\n\n      if (foreground && background) {\n        console.warn(\n          'Specified foreground and background for Touchable, only one can be used at a time. Defaulted to foreground.'\n        );\n      }\n\n      return (\n        <TouchableComponent\n          {...props}\n          useForeground={useForeground}\n          background={(useForeground && foreground) || background}>\n          <View style={style}>\n            {children}\n          </View>\n        </TouchableComponent>\n      );\n    } else if (TouchableComponent === TouchableWithoutFeedback) {\n      return (\n        <TouchableWithoutFeedback {...props}>\n          <View style={style}>\n            {children}\n          </View>\n        </TouchableWithoutFeedback>\n      );\n    } else {\n      let TouchableFallback = this.props.fallback || TouchableComponent;\n      return (\n        <TouchableFallback {...props} style={style}>\n          {children}\n        </TouchableFallback>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}